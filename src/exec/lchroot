#!/bin/bash
set -e
trap clean EXIT
function compile {
    [ -e ./fake_uname.so ]  && return 0
    cat >./fake_uname.c <<EOF
#include <unistd.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/utsname.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

int uname(struct utsname *buf) {
    int ret;
    ret = syscall(SYS_uname, buf);
    char *fake_kern_ver = NULL;
    fake_kern_ver = (char *)getenv("FAKE_KERN");
    if (fake_kern_ver != NULL) { 
        strcpy(buf->release, fake_kern_ver);
    }
    return ret;
}
EOF
    gcc -Wall -fPIC -g -c -DLINUX -Wall ./fake_uname.c && gcc -shared -rdynamic  -o ./fake_uname.so ./fake_uname.o -ldl
    rm -f ./fake_uname.c
    rm -f ./fake_uname.o
}
function clean {
    [ -z $CHROOT_PATH ] && return 0
    umount -f $CHROOT_PATH/dev
    umount -f $CHROOT_PATH/proc
    umount -f $CHROOT_PATH/sys
    rm -f $CHROOT_PATH/tmp/fake_uname.so
    rm -f /tmp/fake_uname.so
}
function mount_d {
    mount -t devtmpfs devtmpfs  $CHROOT_PATH/dev
    mount -t sysfs    sysfs     $CHROOT_PATH/sys
    mount -t proc     proc      $CHROOT_PATH/proc
}

OSIMAGE=$1
FAKE_KERN=$(luna osimage show -n $OSIMAGE --kernver | awk '$2~/<=/{print $1}')
CHROOT_PATH=$(luna osimage show -n $OSIMAGE --path)

mount_d
compile
if [ ! -e ./fake_uname.so ]; then
    >&2 echo "Cannot find fake_uname.so library"
    exit 3
fi
cp ./fake_uname.so $CHROOT_PATH/tmp/
cp ./fake_uname.so /tmp/

shift
FAKE_KERN=$FAKE_KERN LD_PRELOAD=/tmp/fake_uname.so PS1="chroot [\u@$OSIMAGE \W]\$ " chroot $CHROOT_PATH $@
