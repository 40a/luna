#!/usr/bin/env python
import os
import sys
import luna
import argparse
import tempfile
import subprocess
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('luna')
def_format = '%20s%40s\n'

#################### Cluster

def cluster_init(nodeprefix, nodedigits, path, user, group):
    options = luna.Options(create=True, nodeprefix = nodeprefix, nodedigits = nodedigits, path = path, user = user, group = group)

def cluster_delete():
    options = luna.Options()
    options.delete()

def cluster_change(**args):
    options = luna.Options()
#    if args['tracker_clean']:
#        # TODO
#        print 'Not implemented'
#    args.pop('tracker_clean')
    for key in args:
        if not args[key]:
            continue
        options.set(key, args[key])
 
def cluster_show(raw, out_format = def_format):
    options = luna.Options()
    if raw:
        print options.nice_json
        return None
    out_json = options.show()
    out_str = ''
    name = out_json.pop('name')
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_str.rstrip()
    print out_str

#################### OsImage

def osimage_list():
    lst = luna.list('osimage')
    print 'name', 'path', 'kernel'
    for elem in lst:
        osimage = luna.OsImage(elem)
        print elem, osimage.get('path'), osimage.get('kernver')

def osimage_show(out_format = def_format, **args):
    osimage = luna.OsImage(name = args['name'])
    if args['raw']:
        print osimage.nice_json
        return None
    if args['path']:
        print osimage.get('path')
        return None
    if args['kernver']:
        for elem in osimage.list_kernels():
            if elem == osimage.get('kernver'):
                print elem + ' <='
                continue 
            print elem
        return None
    out_json = osimage.show()
    out_str = ''
    name = out_json.pop('name')
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_format % ('name', name) + out_str.rstrip()
    print out_str

def osimage_listkerns(name):
    osimage = luna.OsImage(name = name)
    for elem in osimage.list_kernels():
        print elem

def osimage_add(**args):
    args['create'] = True
    if not bool(args['kernver']):
        args['kernver'] = 'ANY'
    osimage = luna.OsImage(**args)

def osimage_delete(name):
    osimage = luna.OsImage(name)
    osimage.delete()

def osimage_change(**args):
    osimage = luna.OsImage(args['name'])
    args.pop('name')
    for key in args:
        if not args[key]:
            continue
        osimage.set(key, args[key])

def osimage_pack(**args):
    def pack_image(osimage):
        try:
            print 'Creating tarball.'
            res = osimage.create_tarball()
            print 'Done.'
        except:
            return None
        try:
            print 'Creating torrent.'
            res = osimage.create_torrent()
            print 'Done.'
        except:
            return None
        return True
    def pack_boot(osimage):
       print 'Copying kernel & packing inirtd.'
       osimage.pack_boot()
       print "Done."

    osimage = luna.OsImage(args['name'])
    if args['boot']:
        pack_boot(osimage)
        return True
    if args['image']:
        pack_image(osimage)
        return True
    pack_image(osimage)
    pack_boot(osimage)
    return True

#################### BMCSetup

def bmcsetup_list():
    lst = luna.list('bmcsetup')
    print 'name', 'user', 'password'
    for elem in lst:
        bmcsetup = luna.BMCSetup(elem)
        print elem, bmcsetup.get('user'), bmcsetup.get('password')

def bmcsetup_show(name, raw, out_format = def_format):
    bmcsetup = luna.BMCSetup(name = name)
    if raw:
        print bmcsetup.nice_json
        return None
    out_json = bmcsetup.show()
    out_str = ''
    name = out_json.pop('name')
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_format % ('name', name) + out_str.rstrip()
    print out_str

def bmcsetup_add(**args):
    args['create'] = True
    bmcsetup = luna.BMCSetup(**args)

def bmcsetup_change(**args):
    bmcsetup = luna.BMCSetup(args['name'])
    args.pop('name')
    for key in args:
        if not args[key]:
            continue
        bmcsetup.set(key, args[key])

def bmcsetup_delete(name):
    bmcsetup = luna.BMCSetup(name)
    bmcsetup.delete()

"""
#################### IfCfg

def ifcfg_list():
    lst = luna.list('ifcfg')
    print 'name', 'network'
    for elem in lst:
        ifcfg = luna.IfCfg(elem)
        net = ifcfg.get('NETWORK')
        prefix = ifcfg.get('PREFIX')
        print elem, str(net) + "/" + str(prefix)

def ifcfg_show(name, raw, out_format = "%s=%s\n"):
    ifcfg = luna.IfCfg(name = name)
    if raw:
        print ifcfg.nice_json
        return None
    out_json = ifcfg.show()
    out_json.pop('name')
    try:
        out_json.pop('freelist')
    except:
        pass
    out_str = ''
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_str.rstrip()
    print out_str

def ifcfg_add(name):
    init = {'name': name, 'create': True}
    if not sys.stdin.isatty():
        for line in sys.stdin:
            l1 = line.strip().split('=',1)
            init[l1[0].upper()] = l1[1]
    else:
        EDITOR = os.environ.get('EDITOR','vim')
        initial_message = "NETWORK=
PREFIX=
ONBOOT=yes
BOOTPROTO=none"
        tmpfile = tempfile.NamedTemporaryFile(suffix=".tmp")
        tmpfile.write(initial_message)
        tmpfile.flush()
        subprocess.call([EDITOR, tmpfile.name])
        tmpfile.file.seek(0)
        for line in tmpfile.file.readlines():
            l1 = line.strip().split('=',1)
            init[l1[0].upper()] = l1[1]
    ifcfg = luna.IfCfg(**init)

def ifcfg_change(name):
    new_dict = {}
    ifcfg = luna.IfCfg(name)
    if not sys.stdin.isatty():
        for line in sys.stdin:
            l1 = line.strip().split('=',1)
            new_dict[l1[0].upper()] = l1[1]
    else:
        EDITOR = os.environ.get('EDITOR','vim')
        initial_message = ifcfg.dump()
        tmpfile = tempfile.NamedTemporaryFile(suffix=".tmp")
        tmpfile.write(initial_message)
        tmpfile.flush()
        subprocess.call([EDITOR, tmpfile.name])
        tmpfile.file.seek(0)
        for line in tmpfile.file.readlines():
            l1 = line.strip().split('=',1)
            new_dict[l1[0].upper()] = l1[1]
    ifcfg.change(new_dict)

def ifcfg_delete(name):
    ifcfg = luna.IfCfg(name)
    ifcfg.delete()

"""
#################### Network

def network_list():
    networks = luna.list('network')
    print 'name', 'network'
    for elem in networks:
        net = luna.Network(elem)
        print elem, net.get('NETWORK') + "/" + str(net.get('PREFIX'))

def network_show(name, raw, reservedips, out_format = '%20s%60s\n'):
    net = luna.Network(name = name)
    if raw:
        print net.nice_json
        return None
    if reservedips:
        ips = net.get_used_ips()
        print  "\n".join(["%s" % i for i in ips ])
        return None
    out_json = net.show()
    out_str = ""
    out_json.pop('freelist')
    out_json.pop('name')
    out_json['NETWORK'] = net.get('NETWORK')
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_format % ('name', name) + out_str.rstrip()
    print out_str.rstrip()

def network_add(name, network, prefix):
    net = luna.Network(name = name, create = True, NETWORK = network, PREFIX = prefix)

def network_change(name, network, prefix, reserve, release):
    net = luna.Network(name = name)
    if bool(network):
        net.set('NETWORK', network)
    if bool(prefix):
        net.set('PREFIX', prefix)
    if bool(reserve):
        net.reserve_ip(reserve)
    if bool(release):
        net.release_ip(release)
    return None

def network_delete(name):
    net = luna.Network(name)
    net.delete()


#################### Group

def group_list():
    groups = luna.list('group')
    print 'name', 'osimage', 'interfaces'
    for elem in groups:
        group = luna.Group(elem)
#        interfaces = ",".join(["%s:%s" % (k, v) for k, v in group['interfaces'].items()])
        # dirty and ugly, but pyton-ish
        bmcnet = group.show_bmc_if(brief = True)
        interfaces = "BMC:" + str(bmcnet if bmcnet else None)
        for k in group.show()['interfaces'].keys():
            brief_if = group.show_if(k, brief = True)
            if bool(brief_if):
                interfaces += ",%s:%s" % (k, brief_if)
            else:
                interfaces += ",%s:%s" % (k, None)
#        interfaces += ",".join(["%s:%s" % (k, group.show_if(k, brief = True) if group.show_if(k) else None) for k in group.show()['interfaces'].keys()])

        print elem, group.show()['osimage'], interfaces

def group_show(out_format = '%20s%60s\n', **args):
    group = luna.Group(name = args['name'])
    if args['raw']:
        print group.nice_json
        return None
    if bool(args['interface']):
        print group.show_if(args['interface'])
        return None
    elif bool(args['bmcnetwork']):
        print group.show_bmc_if()
        return None
    scr_type =''
    if bool(args['prescript']):
        scr_type = 'prescript'
    elif bool(args['partscript']):
        scr_type = 'partscript'
    elif bool(args['postscript']):
        scr_type = 'postscript'
    if scr_type:
        print group.show()[scr_type]
        return None
    if bool(args['osimage']):
        print group.show()['osimage']
        return None
    if bool(args['bmcsetup']):
        print group.show()['bmcsetup']
        return None
    out_json = group.show()
    out_json.pop('name')
    bmcnet = group.show_bmc_if(brief = True)

    interfaces = "BMC:" + str(bmcnet if bmcnet else None) + ","
    interfaces += ",".join(["%s:%s" % (k, group.show_if(k, brief = True) if group.show_if(k) else None) for k in group.show()['interfaces'].keys()])
    out_json['interfaces'] = interfaces
    out_str = ''
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_str.rstrip()
    print out_str

def group_add(**args):
    args['create'] = True
    args['interfaces'] = args['interface']
    args.pop('interface')
#    try:
#        interface_list  = args.pop('interface')
#        args['interfaces'] = dict( i.split(':') for i in interface_list)
#    except:
#        logger.error('Error parsing interface parameters.')
#        return None
    group = luna.Group(**args)
     
def group_change(**args):
    parm_sum = 0
    for elem in ['prescript', 'postscript', 'partscript', 'interface']:
        parm_sum += int(bool(args[elem]))
    if parm_sum > 1 and args['edit']:
        logger.error('Only one element can be edited')
        return None
    #if args['interface'] == 'BMC':
    #    args['interface'] = None
    #    args['bmcnetwork'] = True
    group = luna.Group(args['name'])
    if bool(args['interface']):
        if bool(args['add']):
            group.add_interface(args['interface'])
        elif bool(args['delete']):
            group.del_interface(args['interface'])
        elif bool(args['setnet']):
            group.set_net_to_if(args['interface'], args['setnet'])
        elif bool(args['delnet']):
            group.del_net_from_if(args['interface'])
        elif args['edit']:
            group.set_if_parms(args['interface'], _edit_script(group.get_if_parms(args['interface'])))
        else:
            print group.show_if(args['interface'])
    elif bool(args['bmcnetwork']):
        if bool(args['setnet']):
            group.set_bmcnetwork(args['setnet'])
        elif bool(args['delnet']):
            group.del_bmcnetwork()
        else:
            print group.show_bmc_if()
    if type(args['boot_if']) == type(''):
        group.set('boot_if',args['boot_if'])
    if type(args['torrent_if']) == type(''):
        group.set('torrent_if',args['torrent_if'])
    if bool(args['osimage']):
        group.osimage(args['osimage'])
    if bool(args['bmcsetup']):
        group.bmcsetup(args['bmcsetup'])
    if   bool(args['prescript']):
        scr_type = 'prescript'
    elif bool(args['partscript']):
        scr_type = 'partscript'
    elif bool(args['postscript']):
        scr_type = 'postscript'
    else:
        return None
    old_script = group.show()[scr_type]
    if not args['edit']:
        print old_script
        return None
    script = _edit_script(old_script)
    if not bool(script):
        script = ''
    group.set(scr_type, script)



def _edit_script(old_script):
    script = ''
    if not sys.stdin.isatty():
        for line in sys.stdin:
            script += line
    else:
        EDITOR = os.environ.get('EDITOR','vim')
        tmpfile = tempfile.NamedTemporaryFile(suffix=".tmp")
        tmpfile.write(old_script)
        tmpfile.flush()
        subprocess.call([EDITOR, '+":set syn=sh"', tmpfile.name])
        tmpfile.file.seek(0)
        for line in tmpfile.file.readlines():
            script += line
    return script

def group_delete(name):
    group = luna.Group(name)
    group.delete()

#################### Node

def node_list():
    nodes = luna.list('node')
    print 'name', 'group', 'mac', 'ips'
    for elem in nodes:
        ips = ''
        node = luna.Node(elem)
        out_json = node.show()
        interfaces = node.get_interfaces()
        bmcip = node.get_human_bmc_ip()
        group = out_json['group']
        mac = node.get_mac()
        if_str = ''
        for interface in interfaces:
            ip = node.get_human_ip(interface)
            if_str += '%s:%s,' % (interface, ip)
        if_str += '%s:%s' % ('BMC', bmcip)
        print elem, group, mac, if_str

def node_show(name, raw, out_format = '%20s%60s\n'):
    node = luna.Node(name = name)
    if raw:
        print node.nice_json
        return None
    out_json = node.show()
    out_json.pop('name')
    bmcip = node.get_human_bmc_ip()
    if_str = ''
    interfaces = node.get_interfaces()
    for interface in interfaces:
        ip = node.get_human_ip(interface)
        if_str += '%s:%s,' % (interface, ip)
    out_json['interfaces'] = if_str.rstrip(',')
    out_json['bmcnetwork'] = bmcip
    out_json['mac'] = node.get_mac()
    out_str = ''
    for key in sorted(out_json):
        out_str += out_format % (key, out_json[key])
    out_str = out_str.rstrip()
    print out_str

def node_add(name, group):
    node = luna.Node(name = name, group = group, create = True)

def node_change(**args):
    node = luna.Node(args['name'])
    if bool(args['ip']) and not (bool(args['interface']) or bool(args['bmcip'])):
        logger.error('Interface or BMC should be specified for given IP.')
        return None
    if (bool(args['interface']) or bool(args['bmcip'])) and not bool(args['ip']):
        logger.error('IP should be specified.')
        return None
    if bool(args['group']):
        node.change_group(args['group'])
        return None
    if bool(args['interface']):
        node.change_ip(args['interface'], args['ip'])
        return None
    if bool(args['bmcip']):
        node.change_bmc_ip(args['ip'])
        return None
    if args['mac'] == '':
        node.clear_mac()
        return None
    if bool(args['mac']):
        node.set_mac(args['mac'])
        return None

def node_delete(name):
    node = luna.Node(name)
    node.delete()

parser = argparse.ArgumentParser(prog='luna',description='Manage Luna Cluster.')
luna_subparsers = parser.add_subparsers(help='Items to operate.', dest='item')

# Cluster
cluster_parser = luna_subparsers.add_parser('cluster', help='Basic cluster operations.')
cluster_parser_actions = cluster_parser.add_subparsers(dest='action')
# show
cluster_command = cluster_parser_actions.add_parser('show',help='Show options.')
cluster_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
# init
cluster_command = cluster_parser_actions.add_parser('init', help='Create Luna Cluster.')
cluster_command.add_argument('--nodeprefix', '--prefix', type=str, help='Auto-prefix for new nodes.', default='node')
cluster_command.add_argument('--nodedigits', '--digits', type=int, help='Zero-autopadding', default=3)
cluster_command.add_argument('--user', type=str, help='Username for running services.', default='luna')
cluster_command.add_argument('--group', type=str, help='Groupname for running services.', default='luna')
cluster_command.add_argument('--path', type=str, help='Path to store files.', default='/opt/luna')

# change
cluster_command = cluster_parser_actions.add_parser('change',help='Change cluster options')
cluster_command.add_argument('--nodeprefix', '--prefix', '-p', type=str, help='Auto-prefix for new nodes.')
cluster_command.add_argument('--nodedigits', '--digits', '-d', type=int, help='Zero-autopadding')
cluster_command.add_argument('--path', type=str, help='Path to store files.')
cluster_command.add_argument('--user', type=str, help='Username for running services.')
cluster_command.add_argument('--group', type=str, help='Groupname for running services.')
cluster_command.add_argument('--server_address', type=str, help='Server address')
cluster_command.add_argument('--server_port', type=int, help='Server port')
###cluster_command.add_argument('--tracker_address', type=str, help='Torrent tracker address')
###cluster_command.add_argument('--tracker_port', type=int, help='Torrent tracker port')
cluster_command.add_argument('--tracker_interval', type=int, help='Torrent tracker announce interval')
cluster_command.add_argument('--tracker_min_interval', type=int, help='Torrent tracker announce min interval')
cluster_command.add_argument('--tracker_maxpeers', type=int, help='Torrent tracker max allowed peers')
cluster_command.add_argument('--torrent_listen_port_min', type=int, help='Torrent client listening port min')
cluster_command.add_argument('--torrent_listen_port_max', type=int, help='Torrent client listening port max')
#cluster_command.add_argument('--tracker_clean', action='store_true', help='Clean database from outdated records')
# delete
cluster_command = cluster_parser_actions.add_parser('delete',help='Delete Luna Cluster.')

# OsImage
osimage_parser = luna_subparsers.add_parser('osimage', help='OsImage operations.')
osimage_parser_actions = osimage_parser.add_subparsers(dest='action')
# list
osimage_command = osimage_parser_actions.add_parser('list', help='List OsImages.')
# show
osimage_command = osimage_parser_actions.add_parser('show', help='Show OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command_group = osimage_command.add_mutually_exclusive_group()
osimage_command_group.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
osimage_command_group.add_argument('--path', '-p', action='store_true', help='Show path to OsImage.')
osimage_command_group.add_argument('--kernver', '-k', action='store_true', help='Show kernel versions.')
osimage_command_group.add_argument('--kernopts', '-o', action='store_true', help='Show kernel options.')
# listkerns
#osimage_command = osimage_parser_actions.add_parser('listkerns', help='List installed kernels in OsImage.')
#osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
# add
osimage_command = osimage_parser_actions.add_parser('add', help='Add osimage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command.add_argument('--path', '-p', required=True, type=str, help='Path to OsImage.')
osimage_command.add_argument('--kernver', '-k', type=str, help='Kernel version. Can be "ANY" keyword (will be used when parameter is ommited).')
osimage_command.add_argument('--kernopts', '-o', type=str, help='Kernel options.')
# change
osimage_command = osimage_parser_actions.add_parser('change', help='Change OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command_group = osimage_command.add_mutually_exclusive_group()
####osimage_command_group.add_argument('--path', '-p', type=str, help='Path to osimage.')
osimage_command_group.add_argument('--kernver', '-k', type=str, help='Kernel version.')
osimage_command_group.add_argument('--kernopts', '-o', type=str, help='Kernel options.')
osimage_command_group.add_argument('--dracutmodules', '-d', type=str, help='Dracut modules')
osimage_command_group.add_argument('--kernmodules', '-m', type=str, help='Kernel modules (drivers)')
# pack
osimage_command = osimage_parser_actions.add_parser('pack', help='Pack OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')
osimage_command_group = osimage_command.add_mutually_exclusive_group(required=False)
osimage_command_group.add_argument('--image', '-i', action='store_true', help='Pack image only.')
osimage_command_group.add_argument('--boot', '-b', action='store_true', help='Pack kernel and initrd only.')
# delete
osimage_command = osimage_parser_actions.add_parser('delete', help='Delete OsImage.')
osimage_command.add_argument('--name', '-n', required=True, type=str, help='Name of the OsImage.')

# BMCSetup
bmcsetup_parser = luna_subparsers.add_parser('bmcsetup', help='BMCSetup instance operations.')
bmcsetup_parser_actions = bmcsetup_parser.add_subparsers(dest='action')
# list
bmcsetup_command = bmcsetup_parser_actions.add_parser('list', help='List BMCSetup instances.')
# show
bmcsetup_command = bmcsetup_parser_actions.add_parser('show', help='Show BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
# add
bmcsetup_command = bmcsetup_parser_actions.add_parser('add', help='Add BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--user', '-u', type=str, help='User name', default='ladmin')
bmcsetup_command.add_argument('--password', '-p', type=str, help='Password', default='ladmin')
bmcsetup_command.add_argument('--userid', '-I', type=int, help='UserID', default=3)
bmcsetup_command.add_argument('--netchannel', '-N', type=int, help='Netchannel', default=1)
bmcsetup_command.add_argument('--mgmtchannel', '-M', type=int, help='Mgmtchannel', default=1)
# change
bmcsetup_command = bmcsetup_parser_actions.add_parser('change', help='Change BMCSetup instance.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
bmcsetup_command.add_argument('--user', '-u', type=str, help='User name')
bmcsetup_command.add_argument('--password', '-p', type=str, help='Password')
bmcsetup_command.add_argument('--userid', '-I', type=int, help='UserID')
bmcsetup_command.add_argument('--netchannel', '-N', type=int, help='Netchannel')
bmcsetup_command.add_argument('--mgmtchannel', '-M', type=int, help='Mgmtchannel')
# delete
bmcsetup_command = bmcsetup_parser_actions.add_parser('delete', help='Delete osimage.')
bmcsetup_command.add_argument('--name', '-n', required=True, type=str, help='Name of the BMCSetup instance.')
"""
# IfCfg
ifcfg_parser = luna_subparsers.add_parser('ifcfg', help='IfCfg operations.')
ifcfg_parser_actions = ifcfg_parser.add_subparsers(dest='action')
# list
ifcfg_command = ifcfg_parser_actions.add_parser('list', help='List IfCfg instances.')
# show
ifcfg_command = ifcfg_parser_actions.add_parser('show', help='Show IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
ifcfg_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
# add
ifcfg_command = ifcfg_parser_actions.add_parser('add', help='Add IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
# change
ifcfg_command = ifcfg_parser_actions.add_parser('change', help='Change IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
# delete
ifcfg_command = ifcfg_parser_actions.add_parser('delete', help='Delete IfCfg instance.')
ifcfg_command.add_argument('--name', '-n', required=True, type=str, help='Name of the IfCfg instance.')
"""
# Network
network_parser = luna_subparsers.add_parser('network', help='Node operations.')
network_parser_actions = network_parser.add_subparsers(dest='action')
# list
network_command = network_parser_actions.add_parser('list', help='List Networks.')
# show
network_command = network_parser_actions.add_parser('show', help='Show Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
network_command.add_argument('--reservedips', '-r', action='store_true', help='List reserved IPs.')
# add
network_command = network_parser_actions.add_parser('add', help='Add Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--network', '-N', metavar='N.N.N.N', required=True, type=str, help='Network.')
network_command.add_argument('--prefix', '-P', metavar='PP', required=True, type=int, help='Prefix.')
# change
network_command = network_parser_actions.add_parser('change', help='Change Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')
network_command.add_argument('--network', '-N', metavar='N.N.N.N', type=str, help='Network.')
network_command.add_argument('--prefix', '-P', metavar='PP', type=int, help='Prefix.')
network_command.add_argument('--reserve', '-R', metavar='X.X.X.X', type=str, help='Reserve IP.')
network_command.add_argument('--release', metavar='X.X.X.X', type=str, help='Release IP.')
# delete
network_command = network_parser_actions.add_parser('delete', help='Delete Network.')
network_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Network.')


# Group
group_parser = luna_subparsers.add_parser('group', help='Group operations.')
group_parser_actions = group_parser.add_subparsers(dest='action')
# list
group_command = group_parser_actions.add_parser('list', help='List Groups.')
# show
group_command = group_parser_actions.add_parser('show', help='Show Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command_group = group_command.add_mutually_exclusive_group()
group_command_group.add_argument('--raw', '-R', action='store_true', help='Raw JSON output')
group_command_group.add_argument('--osimage', '-o', action='store_true', help='Osimage assigned to Group.')
group_command_group.add_argument('--prescript', '--pre', action='store_true', help='Set prescript.')
group_command_group.add_argument('--postscript', '--post', action='store_true', help='Set postscript.')
group_command_group.add_argument('--partscript', '--part', action='store_true', help='Set partition script. Localdisk should be mounted under /sysimage')
group_command_group.add_argument('--bmcsetup', '-b', action='store_true', help='BMCSetup assigned to Group.')
group_command_group.add_argument('--interface', '-i', type=str, help='Interface.')
group_command_group.add_argument('--bmcnetwork', '--bn', action='store_true',  help='Network for BMC.')
# add
group_command = group_parser_actions.add_parser('add', help='Add Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command.add_argument('--osimage', '-o', required=True, type=str, help='Osimage assigned to Group.')
group_command.add_argument('--bmcsetup', '-b', type=str, help='BMCSetup assigned to Group.')
group_command.add_argument('--bmcnetwork', '--bn', type=str, help='Network for BMC.')
group_command.add_argument('--interface', '-i', action='append', required=True, type=str, help='Interfaces specified in format -i eth0 -i eth1')
# change
group_command = group_parser_actions.add_parser('change', help='Change Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')
group_command.add_argument('--osimage', '-o', type=str, help='Osimage assigned to Group.')
group_command.add_argument('--prescript', '--pre', action='store_true', help='Set prescript.')
group_command.add_argument('--postscript', '--post', action='store_true', help='Set postscript.')
group_command.add_argument('--partscript', '--part', action='store_true', help='Set partition script. Localdisk should be mounted under /sysimage')
group_command.add_argument('--bmcsetup', '-b', type=str, help='BMCSetup assigned to Group.')
group_command.add_argument('--boot_if', '--bi', type=str, help='Boot interface')
group_command.add_argument('--torrent_if', '--ti', type=str, help='High-speed interface')
group_command_group = group_command.add_mutually_exclusive_group()
group_command_group.add_argument('--interface', '-i', type=str, help='Interface.')
group_command_group.add_argument('--bmcnetwork', '--bn', action='store_true',  help='Network for BMC.')

#group_command.add_argument('--interface', '-i', type=str, help='Interface. Can be \'-i eth0\' or \'-i BMC\'')
group_command.add_argument('--add', '-A', action='store_true', help='Add interface.')
group_command.add_argument('--delete', '-D', action='store_true', help='Delete interface.')
group_command.add_argument('--setnet', '--sn', type=str, metavar='NETWORK', help='Set Network for interface or for BMC')
group_command.add_argument('--delnet', '--dn', action='store_true', help='Delete Network for interface or for BMC')
group_command.add_argument('--edit', '-e', action='store_true', help='Edit interface parameters or edit scripts')
# delete
group_command = group_parser_actions.add_parser('delete', help='Delete Group.')
group_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Group.')


# Node
node_parser = luna_subparsers.add_parser('node', help='Node operations.')
node_parser_actions = node_parser.add_subparsers(dest='action')
# list
node_command = node_parser_actions.add_parser('list', help='List Nodes.')
# show
node_command = node_parser_actions.add_parser('show', help='Show Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')
node_command.add_argument('--raw', '-R', action='store_true', help='Raw JSON output.')
# add
node_command = node_parser_actions.add_parser('add', help='Show Node.')
node_command.add_argument('--name', '-n', type=str, help='Name of the Node.')
node_command.add_argument('--group', '-g', required=True, type=str, help='Group.')
# change
node_command = node_parser_actions.add_parser('change', help='Change Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')
node_command_group = node_command.add_mutually_exclusive_group(required=True)
node_command_group.add_argument('--group', '-g', type=str, help='Group.')
node_command_group.add_argument('--interface', '-i', type=str, help='Assign ip address to interface.')
node_command_group.add_argument('--bmcip', '-b', action='store_true', help='Assign ip address to BMC interface.')
node_command.add_argument('--ip', metavar='X.X.X.X', type=str, help='IP for interface.')
node_command_group.add_argument('--mac', metavar='XX:XX:XX:XX:XX', type=str, help='Mac address.')

# delete
node_command = node_parser_actions.add_parser('delete', help='Delete Node.')
node_command.add_argument('--name', '-n', required=True, type=str, help='Name of the Node.')


if __name__ == '__main__':
        args = parser.parse_args()
        args_d = vars(args)
        current_env = sys.modules[__name__]
        try:
            call_fun =  getattr(current_env, '%s_%s' % (args.item, args.action))
            args_d.pop('item')
            args_d.pop('action')
            call_fun(**args_d)
        except:
            raise
